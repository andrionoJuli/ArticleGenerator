from langchain.prompts import PromptTemplate
from langchain_community.chat_models import ChatOllama
from langchain_core.output_parsers import JsonOutputParser
from typing import List
from typing_extensions import TypedDict

llm = ChatOllama(model="llama3", format="json", temperature=1.2)


class GraphState(TypedDict):
    """
    Represents the state of our graph.

    Attributes:
        instruction: instruction
        title: title generated by llm
        points: list of main points generated by llm
        intro: intro generated by llm
        paragraphs: paragraphs generated by llm
        conclusion: conclusion generated by llm
        tags: tags generated by llm
    """

    instruction: str
    title: str
    points: List[str]
    intro: str
    paragraphs: List[str]
    conclusion: str
    tags: List[str]


# Node
def title_generator(state):
    """Tool for generating the title for the article"""
    title_prompt = PromptTemplate(
        template="""
        You are a content creation assistant that specialize in writing blog articles from various topics.
        You will be given an instruction that decide topic of the article, generate an appropriate title based on topic.
        Follow these guidelines:
            - The title must be less than 50 characters.
            - The title must be one sentence
            - The must be able to catch readers' attention
            - Return the title in the JSON format with a single key 'title' and no preamble or explanation.

        Title to be generated: {instruction}""",
        input_variables=["instruction"]
    )

    title_gen = title_prompt | llm | JsonOutputParser()

    response = title_gen.invoke({"text": state['instruction']})
    return {'title': response['title']}


def points_generator(state):
    """Tool for generating the main points for the article"""
    points_prompt = PromptTemplate(
        template="""
        You are a content creation assistant that specialize in writing blog articles from various topics.
        You will be given a title of an article, generate an appropriate points that can form the body based on title.
        Follow these guidelines:
            - You can generate three to five points.
            - The points must be related to the title.
            - The generated main points must complement each others.
            - The points must capture the essence of the title.
            - The points should must be able to pique readers curiosity or interests.
            - Do not elaborate the points.
            - The points must be 10 words or less.
            - These points serve as the markdown of the article.
            - Return the points in the JSON format with a single key 'points' as a list of strings and no preamble or explanation.

        Main points to be generated: {title}""",
        input_variables=["title"]
    )

    points_gen = points_prompt | llm | JsonOutputParser()

    response = points_gen.invoke({"title": state['title']})
    return {'points': response['points']}


def intro_generator(state):
    """Tool for generating the intro for the article"""
    intro_prompt = PromptTemplate(
        template="""
        You are a creative professional content creation assistant that specialize in writing blog articles from various topics.
        You will be given the title and points of an article, generate an appropriate introduction based on the title and points.
        Follow these guidelines:
            - The introduction must be related to the title and points.
            - The introduction must introduce the title and prepare readers for the points.
            - The introduction should be able to pique readers curiosity or interests.
            - Write in active voice. Use the passive voice only in rare cases.
            - The introduction should be 3 to 5 sentences long.
            - The introduction must be 100 words or less.
            - Return the introduction in the JSON format with a single key 'intro' and no preamble or explanation.

        Title of the article: {title}
        Points of the article: {points}""",
        input_variables=["title", "points"]
    )

    intro_gen = intro_prompt | llm | JsonOutputParser()

    response = intro_gen.invoke({"title": state['title'], "points": state['points']})
    return {'intro': response['intro']}


def para_generator(state):
    """Tool for generating the paragraphs for the article"""
    para_prompt = PromptTemplate(
        template="""
        You are a creative professional content creation assistant that specialize in writing blog articles from various topics.
        You will be given the title and points of an article, generate appropriate body paragraphs for each points based on the title and points.
        Follow these guidelines:
            - Each paragraph must elaborate on the paired points, using specific, recent, and relatable examples or events to engage the reader.
            - Each paragraph must be at least 350 words long, providing comprehensive coverage and insights into the topic.
            - Use everyday language for accessibility. If technical terms are necessary, explain them upon first reference.
            - You can add bullets point in the paragraph
            - Maintain clarity by keeping the subject and verb close together.
            - Structure paragraphs to pique the reader's curiosity and maintain interest throughout.
            - Write in active voice, using passive voice only when absolutely necessary.
            - Ensure each paragraph has a clear topic sentence and transitions smoothly to the next point.
            - Return the paragraphs in the JSON format with a single key 'paragraphs' as a list of strings and no preamble or explanation.

        Title of the article: {title}
        Points of the article: {points}""",
        input_variables=["title", "points"]
    )

    para_gen = para_prompt | llm | JsonOutputParser()

    response = para_gen.invoke(
        {"title": state['title'], "points": state['points'], "introduction": state['introduction']})
    return {'paragraphs': response['paragraphs']}


def conclusion_generator(state):
    """Tool for generating the conclusion for the article"""
    con_prompt = PromptTemplate(
        template="""
        You are a creative professional content creation assistant that specialize in writing blog articles from various topics.
        You will be given the title, points, and paragraphs of an article, generate an appropriate conclusion based on these info.
        Follow these guidelines:
            - Ensure the conclusion is directly related to the provided information.
            - Summarize the main content and key points of the article effectively.
            - Enlighten the reader with the learning outcomes or insights gained from the article.
            - Write in active voice. Use the passive voice only in rare cases.
            - The conclusion should be 3 to 5 sentences long.
            - The conclusion must be 100 words or less.
            - Return the conclusion in the JSON format with a single key 'conclusion' and no preamble or explanation.

        Title of the article: {title}
        Points of the article: {points}
        Paragraphs of the article: {paragraphs}""",
        input_variables=["title", "points", "paragraphs"]
    )

    con_gen = con_prompt | llm | JsonOutputParser()

    response = con_gen.invoke({"title": state['title'], "points": state['points'], "paragraphs": state['paragraphs']})
    return {'conclusion': response['conclusion']}


def tags_generator(state):
    """Tool for generating the tags for the article"""
    tags_prompt = PromptTemplate(
        template="""
        You are a creative professional content creation assistant that specialize in writing blog articles from various topics.
        You will be given the title, points, and paragraphs of an article, generate relevant and effective tags for the article.
        Follow these guidelines:
            - Ensure the tags encapsulate the content and key points of the article.
            - Use concise words or phrases that capture the essence of the article.
            - Use general tags to improve the article's reachability and relevance.
            - Each tag must be one or two words long.
            - Generate the 5 most fitting tags.
            - Return the tags in the JSON format with a single key 'tags' as a list of string and no preamble or explanation.

        Title of the article: {title}
        Points of the article: {points}
        Paragraphs of the article: {paragraphs}""",
        input_variables=["title", "points", "paragraphs"]
    )

    tags_gen = tags_prompt | llm | JsonOutputParser()

    response = tags_gen.invoke({"title": state['title'], "points": state['points'], "paragraphs": state['paragraphs']})
    return {'tags': response['tags']}


instruction = "An article about lifestyle for parenthood"

title = "A guide to a fulfilling parenthood"

points = ['Setting clear expectations for your role', 'Cultivating emotional intelligence in yourself',
          'Nurturing open communication with children', 'Finding balance between parenting and personal life',
          'Prioritizing self-care amidst chaos']

introduction = ("Becoming a parent is a life-changing experience that comes with its fair share of joys and "
                "challenges. As you embark on this incredible journey, it's essential to have a guide to help you "
                "navigate the twists and turns. In this article, we'll explore six key elements that can help you "
                "cultivate a fulfilling parenthood. From setting clear expectations for your role to embracing the "
                "journey without perfectionism, we'll dive into the strategies that can make all the difference in "
                "raising happy and healthy children.")

para_prompt = PromptTemplate(
    template="""
                You are a creative professional content creation assistant that specialize in writing blog articles from various topics.
                You will be given the title and points of an article, generate appropriate body paragraphs for each points based on the title and points.
                Follow these guidelines:
                    - Each paragraph must elaborate on the paired points, using specific, recent, and relatable examples or events to engage the reader.
                    - Each paragraph must be at least 350 words long, providing comprehensive coverage and insights into the topic.
                    - Use everyday language for accessibility. If technical terms are necessary, explain them upon first reference.
                    - You can add bullets point in the paragraph
                    - Maintain clarity by keeping the subject and verb close together.
                    - Structure paragraphs to pique the reader's curiosity and maintain interest throughout.
                    - Write in active voice, using passive voice only when absolutely necessary.
                    - Ensure each paragraph has a clear topic sentence and transitions smoothly to the next point.
                    - Return the paragraphs in the JSON format with a single key 'paragraphs' as a list of strings and no preamble or explanation.
                Title of the article: {title}
                Points of the article: {points}""",
    input_variables=["title", "points"]
)

# para_gen = para_prompt | llm | JsonOutputParser()
#
# response = para_gen.invoke({"title": title, "points": points})
#
# print(response)

paragraphs = "### The Pressure Cooker of Parenting: Where Mental Health Takes a Backseat\n\nAs a young parent, you're no stranger to the pressure cooker that is parenting. From the moment your little one arrives, you're hit with a wave of responsibilities - from caring for their every need to managing household tasks and maintaining relationships. It's a lot to handle, even for the most capable and confident among us.\n\nBut what happens when the emotional toll of parenting becomes too much to bear? When the constant juggling act leaves you feeling drained, guilty, and anxious about your ability to be the best parent possible?\n\n### Feeling Isolated: The Silent Sufferer of Mental Health in Young Parents\n\nThe truth is, many young parents struggle in silence. We're not always forthcoming with our feelings, fearing that others might judge us or think we're not doing a good enough job as parents. And yet, bottling up emotions can have devastating consequences for both ourselves and our children.\n\nThink about it: when you're feeling overwhelmed and anxious, are you really providing the best possible care for your child? Or are you stuck in a cycle of stress, guilt, and self-doubt, unsure of how to escape?\n\n### The Weight of Guilt: Why Young Parents Feel Like They're Failing\n\nGuilt is another silent killer that many young parents face. We compare our parenting styles to others, feeling like we're not good enough or that our children are suffering because of us. But the truth is, every parent makes mistakes - and it's okay.\n\nIn reality, you're doing your best with what you have. And if that's not enough for anyone else, maybe they need to reevaluate their expectations. The point is, guilt is a heavy burden that can lead to anxiety, depression, and feelings of inadequacy.\n\n### Breaking the Silence: Why It's Crucial to Prioritize Self-Care as a Young Parent\n\nSo how do you break free from this cycle of stress, guilt, and isolation? The answer lies in prioritizing self-care. This doesn't mean abandoning your children or neglecting their needs - it means acknowledging that taking care of yourself is essential for being the best parent possible.\n\n• Schedule time for relaxation: whether that's reading a book, taking a bath, or simply enjoying a quiet cup of coffee in the morning.\n• Practice self-compassion: treat yourself with kindness and understanding, just as you would your child.\n• Seek support: find a trusted friend, family member, or mental health professional who can offer guidance and validation.\n• Set boundaries: prioritize what's important to you and learn to say no to others when necessary.\n\nBy acknowledging the reality of young parents' struggles with mental health and taking steps to prioritize self-care, we can break free from the cycle of stress, guilt, and isolation. We can find a sense of balance in our busy lives and become better equipped to handle the challenges that come with parenting.\n\nThe struggle may be real, but it doesn't have to define us."

# for para in paragraphs:
#     print(len(para.split()))

print(len(paragraphs.split()))
